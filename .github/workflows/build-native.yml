name: Build and Upload APK

on:
  push:
    branches:
      - develop-native  

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v2

      # Step 3: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'
          
      # Step 4: Install Java 17
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin' 

      # Step 5: Install dependencies
      - name: Install dependencies
        run: npm install

      # Step 6: Install React Native CLI
      - name: Install React Native CLI
        run: npm install -g react-native-cli

      # Step 7: Clean Gradle Cache and Build the Android app
      - name: Build Android App
        env:
          GRADLE_OPTS: "-Xmx2048m" 
        run: |
          cd android
          chmod +x ./gradlew  # Garantir permissões de execução
          ./gradlew clean assembleDebug --info  # Executa a limpeza e constrói com mais informações

      # Step 8: Upload the APK to Azure VM
      - name: Upload APK to Azure VM
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.THARSEO_BACKEND_HOST }}
          username: ${{ secrets.THARSEO_BACKEND_HOST_USER }}
          password: ${{ secrets.THARSEO_BACKEND_PASS }}
          port: 22
          source: android/app/build/outputs/apk/debug/app-debug.apk
          target: /home/tharseo/apk/  # Corrigido o caminho de destino

      # Step 9: Check if download_server.py exists and upload if not
      - name: Check and upload download server script
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.THARSEO_BACKEND_HOST }}
          username: ${{ secrets.THARSEO_BACKEND_HOST_USER }}
          password: ${{ secrets.THARSEO_BACKEND_PASS }}
          port: 22
          source: download_server.py
          target: /home/tharseo/apk/

      # Step 10: Start Simple HTTP Server on Azure VM
      - name: Start Simple HTTP Server on Azure VM
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.THARSEO_BACKEND_HOST }}
          username: ${{ secrets.THARSEO_BACKEND_HOST_USER }}
          password: ${{ secrets.THARSEO_BACKEND_PASS }}
          port: 22
          script: |
            # Verificar se o script já está presente
            if [ ! -f /home/tharseo/apk/download_server.py ]; then
              echo "O script download_server.py não existe no servidor. Copiando agora..."
              cp ~/apk/download_server.py /home/tharseo/apk/
            else
              echo "O script download_server.py já existe no servidor."
            fi
            
            # Verificar se o servidor está rodando e reiniciar se necessário
            if lsof -i :8500; then
              echo "Servidor já está rodando na porta 8500. Reiniciando..."
              pkill -f download_server.py  # Mata o processo atual do servidor
            fi
            
            # Iniciar o servidor HTTP
            nohup python3 /home/tharseo/apk/download_server.py &

      # Step 11: List download link
      - name: List download link
        run: |
          echo "O APK está disponível para download em: http://${{ secrets.THARSEO_BACKEND_HOST }}:8500/app-debug.apk" \
          | tee -a $GITHUB_ENV
