name: Build and Upload APK

on:
  push:
    branches:
      - develop-native  

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v2

      # # Step 2: Notify that the deploy has started
      # - name: Notify that deploy has started
      #   run: |
      #     MESSAGE="üöÄ  Deploy MOBILE na branch *develop-native* foi iniciado! A previs√£o para conclus√£o √© de 12 minutos."
      #     curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
      #     -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
      #     -d text="${MESSAGE}" \
      #     -d parse_mode="Markdown"

      # Step 3: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'
          
      # Step 4: Install Java 17
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin' 

      # Step 5: Install dependencies
      - name: Install dependencies
        run: npm install

      # Step 6: Install React Native CLI
      - name: Install React Native CLI
        run: npm install -g react-native-cli

      # Step 7: Clean Gradle Cache and Build the Android app
      - name: Build Android App
        env:
          GRADLE_OPTS: "-Xmx2048m" 
        run: |
          cd android
          chmod +x ./gradlew  # Garantir permiss√µes de execu√ß√£o
          ./gradlew clean assembleDebug --info  # Executa a limpeza e constr√≥i com mais informa√ß√µes

      # Step 8: Upload the APK to Azure VM
      - name: Upload APK to Azure VM
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.THARSEO_BACKEND_HOST }}
          username: ${{ secrets.THARSEO_BACKEND_HOST_USER }}
          password: ${{ secrets.THARSEO_BACKEND_PASS }}
          port: 22
          source: android/app/build/outputs/apk/debug/app-debug.apk
          target: /home/tharseo/apk/


     # Step 9: Check if download_server.py exists and upload if not
      - name: Check and upload download server script
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.THARSEO_BACKEND_HOST }}
          username: ${{ secrets.THARSEO_BACKEND_HOST_USER }}
          password: ${{ secrets.THARSEO_BACKEND_PASS }}
          port: 22
          source: download_server.py
          target: /home/tharseo/apk/

     # Step 10: Start Simple HTTP Server on Azure VM
      - name: Start Simple HTTP Server on Azure VM
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.THARSEO_BACKEND_HOST }}
          username: ${{ secrets.THARSEO_BACKEND_HOST_USER }}
          password: ${{ secrets.THARSEO_BACKEND_PASS }}
          port: 22
          script: |
            # Verificar se o script j√° est√° presente
            if [ ! -f /home/tharseo/apk/download_server.py ]; then
              echo "O script download_server.py n√£o existe no servidor. Copiando agora..."
              cp ~/apk/download_server.py /home/tharseo/apk/
            else
              echo "O script download_server.py j√° existe no servidor."
            fi
            
            # Iniciar o servidor HTTP
            nohup python3 /home/tharseo/apk/download_server.py &


      # Step 11: List download link
      - name: List download link
        run: |
          echo "O APK est√° dispon√≠vel para download em: http://${{ secrets.THARSEO_BACKEND_HOST }}:8500/app-debug.apk" \
          | tee -a $GITHUB_ENV

      # # Step 12: Notify on successful build with link to APK
      # - name: Notify on success with link to APK
      #   run: |
      #     MESSAGE="üéâ A nova vers√£o de desenvolvimento do aplicativo foi constru√≠da com sucesso! Voc√™ pode baixar o APK [aqui](http://${{ secrets.THARSEO_BACKEND_HOST }}:8500/app-debug.apk)."
      #     curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
      #     -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
      #     -d text="${MESSAGE}" \
      #     -d parse_mode="Markdown"

      # # Step 13: Notify on failure
      # - name: Notify on failure
      #   if: failure()
      #   run: |
      #     MESSAGE="üö® Ocorreu um erro durante o processo de build do aplicativo!\nPor favor, verifique os logs para mais informa√ß√µes."
      #     curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
      #     -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
      #     -d text="${MESSAGE}" \
      #     -d parse_mode="Markdown"
