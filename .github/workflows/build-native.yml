name: Build and Upload APK

on:
  push:
    branches:
      - develop-native  

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v2

      # Step 2: Set up JDK # Step 2: Notify that the deploy has started
      - name: Notify that deploy has started
        run: |
          MESSAGE="üöÄ  Deploy MOBILE na branch *develop-native* foi iniciado! A previs√£o para conclus√£o √© de 12 minutos."
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
          -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
          -d text="${MESSAGE}" \
          -d parse_mode="Markdown"

      # Step 3: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'
          
      # Step 4: Install Java 17
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin' 

      # Step 5: Install dependencies
      - name: Install dependencies
        run: npm install

      # Step 6: Install React Native CLI
      - name: Install React Native CLI
        run: npm install -g react-native-cli

      # Step 7: Clean Gradle Cache and Build the Android app
      - name: Build Android App (Release)
        env:
          GRADLE_OPTS: "-Xmx4096m"
        run: |
          cd android
          chmod +x ./gradlew  
          ./gradlew clean assembleRelease --info  # Executa a limpeza e constr√≥i com mais informa√ß√µes

      # Step 8: Upload the APK as an artifact
      - name: Upload APK
        id: upload-apk
        uses: actions/upload-artifact@v3 
        with:
          name: app-release.apk
          path: android/app/build/outputs/apk/release/app-release.apk

      # Step 9: Download APK artifact
      - name: Download APK artifact
        uses: actions/download-artifact@v3
        with:
          name: app-release.apk

      # Step 10: Upload APK to Azure VM
      - name: Upload APK to Azure VM
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.THARSEO_BACKEND_HOST }}
          username: ${{ secrets.THARSEO_BACKEND_HOST_USER }}
          password: ${{ secrets.THARSEO_BACKEND_PASS }}
          port: 22
          source: app-release.apk  
          target: /home/tharseo/apk/ 

      # Step 11: Check if download_server.py exists and upload if not
      - name: Check and upload download server script
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.THARSEO_BACKEND_HOST }}
          username: ${{ secrets.THARSEO_BACKEND_HOST_USER }}
          password: ${{ secrets.THARSEO_BACKEND_PASS }}
          port: 22
          source: download_server.py
          target: /home/tharseo/apk/

      # Step 12: Start Simple HTTP Server on Azure VM
      - name: Start Simple HTTP Server on Azure VM
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.THARSEO_BACKEND_HOST }}
          username: ${{ secrets.THARSEO_BACKEND_HOST_USER }}
          password: ${{ secrets.THARSEO_BACKEND_PASS }}
          port: 22
          script: |
            # Verificar se o servidor est√° rodando na porta 8500
            if lsof -i :8500; then
              echo "Servidor j√° est√° rodando na porta 8500. Nenhuma a√ß√£o necess√°ria."
            else
              echo "Servidor n√£o est√° rodando. Substituindo o script e iniciando o servidor."
              
              # Verificar se o script j√° est√° presente e substituir se necess√°rio
              if [ -f /home/tharseo/apk/download_server.py ]; then
                echo "Substituindo o script download_server.py existente."
              else
                echo "O script download_server.py n√£o existe no servidor. Copiando agora..."
                cp ~/apk/download_server.py /home/tharseo/apk/
              fi
              
              # Iniciar o servidor HTTP
              nohup python3 /home/tharseo/apk/download_server.py &
              echo "Servidor iniciado na porta 8500."
            fi

      # Step 13: List download link
      - name: List download link
        run: |
          echo "O APK est√° dispon√≠vel para download em: http://tharseo.zapto.org:8500/app-release.apk" 
          
      # Step 14: Notify on successful build with link to artifact
      - name: Notify on success with link to APK
        if: success()
        run: |
          ARTIFACT_URL="http://tharseo.zapto.org:8500/app-release.apk"
          MESSAGE="üéâ A nova vers√£o de desenvolvimento do aplicativo foi buildada com sucesso! Desinstale a antiga e instale a nova! Voc√™ pode baixar o APK [aqui](${ARTIFACT_URL})."
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
          -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
          -d text="${MESSAGE}" \
          -d parse_mode="Markdown"

      # Step 15: Notify on failure
      - name: Notify on failure
        if: failure()
        run: |
          MESSAGE="üö® Ocorreu um erro durante o processo de build do aplicativo! Por favor, verifique os logs para mais informa√ß√µes."
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
          -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
          -d text="${MESSAGE}" \
          -d parse_mode="Markdown"
